<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:u="using:Nventive.View.Controls"
					xmlns:uloc="http://nventive.com/localization/1.0"
					xmlns:c="using:ApplicationTemplate.Views.Controls">

	<Style x:Key="DefaultMenuRadioButtonStyle"
		   TargetType="c:MenuRadioButton">

		<Setter Property="Foreground"
				Value="{StaticResource MaterialOnSurfaceMediumBrush}" />
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="HorizontalAlignment"
				Value="Stretch" />
		<Setter Property="VerticalAlignment"
				Value="Stretch" />
		<Setter Property="HorizontalContentAlignment"
				Value="Center" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="FontFamily"
				Value="{StaticResource FontFamily01}" />
		<Setter Property="Padding"
				Value="20" />
		<Setter Property="MinWidth"
				Value="0" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="c:MenuRadioButton">

					<Grid x:Name="Root"
						  Background="{TemplateBinding Background}"
						  BorderBrush="{TemplateBinding BorderBrush}"
						  BorderThickness="{TemplateBinding BorderThickness}"
						  Padding="{TemplateBinding Padding}">
						<VisualStateManager.VisualStateGroups>

							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver" />
								<VisualState x:Name="Pressed" />
								<VisualState x:Name="Disabled" />
							</VisualStateGroup>

							<VisualStateGroup x:Name="CheckStates">
								<VisualState x:Name="Checked">
									<VisualState.Setters>
										<Setter Target="ContentPresenter.FontWeight"
												Value="Bold" />
										<Setter Target="ContentPresenter.Foreground"
												Value="{StaticResource MaterialPrimaryBrush}" />
										<Setter Target="Root.Background"
												Value="{StaticResource MaterialOnPrimaryBrush}" />
										<Setter Target="CheckedIcon.Visibility"
												Value="Visible" />
										<Setter Target="UncheckedIcon.Visibility"
												Value="Collapsed" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Unchecked" />
								<VisualState x:Name="Indeterminate" />
							</VisualStateGroup>

							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Focused" />
								<VisualState x:Name="Unfocused" />
								<VisualState x:Name="PointerFocused" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid.RowDefinitions>
							<RowDefinition Height="*" />
							<RowDefinition Height="25" />
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>

						<!--
						We use two icons and an visibility trick to mimic the icon changing its style (path control).
						This is because changing the Style property with visual state setters causes an exception
						when rendering the page. Setters require the value to always be non-null and fully loaded.
						This is not our case, since we use injected properties that come from static resources.
						-->
						<Grid VerticalAlignment="Bottom"
							  Grid.Row="1">

							<!-- CheckedIcon -->
							<u:PathControl x:Name="CheckedIcon"
										   Style="{TemplateBinding CheckedIconStyle}"
										   Foreground="{StaticResource MaterialPrimaryBrush}"
										   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										   Visibility="Collapsed" />

							<!-- UncheckedIcon -->
							<u:PathControl x:Name="UncheckedIcon"
										   Style="{TemplateBinding UncheckedIconStyle}"
										   Foreground="{TemplateBinding Foreground}"
										   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										   Visibility="Visible" />
						</Grid>

						<!-- Label -->
						<TextBlock x:Name="ContentPresenter"
								   Text="{TemplateBinding Content}"
								   Foreground="{TemplateBinding Foreground}"
								   TextAlignment="Center"
								   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								   VerticalAlignment="Bottom"
								   AutomationProperties.AccessibilityView="Raw"
								   Margin="0,5"
								   Grid.Row="2" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="c:MenuRadioButton"
		   BasedOn="{StaticResource DefaultMenuRadioButtonStyle}" />

</ResourceDictionary>
