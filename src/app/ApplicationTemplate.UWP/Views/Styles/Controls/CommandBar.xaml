<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
					xmlns:win="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:xamarin="http://nventive.com/xamarin"
					xmlns:android="http://nventive.com/android"
					xmlns:ios="http://nventive.com/ios"
					xmlns:u="using:Nventive.View.Controls"
					xmlns:ue="using:Nventive.View.Extensions"
					xmlns:toolkit="using:Uno.UI.Toolkit"
					mc:Ignorable="xamarin android ios">

	<!-- 
		IMPORTANT DOCUMENTATION
		https://github.com/unoplatform/uno/blob/master/doc/articles/controls/CommandBar.md
	-->

	<!-- TODO: Remove when Material fixes the issue it has -->
	<win:ControlTemplate x:Key="XamlMaterialCommandBarTemplate"
						 TargetType="CommandBar">
		<!-- Simplified CommandBar template that adds support for Uno.UI.CommandBarExtensions.NavigationCommand on Windows. -->
		<Grid x:Name="LayoutRoot"
			  win:Height="48"
			  Background="{TemplateBinding Background}">

			<Grid x:Name="ContentRoot"
				  Margin="{TemplateBinding Padding}"
				  Background="{TemplateBinding Background}"
				  Opacity="{TemplateBinding Opacity}">

				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" />
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="Auto" />
				</Grid.ColumnDefinitions>

				<!-- note: NavigationCommand is an AppBarButton, not ICommand -->
				<ContentControl Content="{Binding (toolkit:CommandBarExtensions.NavigationCommand), RelativeSource={RelativeSource TemplatedParent}}"
								Foreground="{TemplateBinding Foreground}"
								Height="{StaticResource MaterialCommandBarHeight}"
								Width="{StaticResource MaterialCommandBarHeight}"
								IsTabStop="False" />

				<!--
					Use a ContentControl rather than a ContentPresenter so that IsEnabled can be set to false
					in the Minimal/HiddenClosed states to remove it from being a tab-stop candidate.
				-->
				<ContentControl x:Name="ContentControl"
								Grid.Column="1"
								Margin="16,0"
								Content="{TemplateBinding Content}"
								ContentTemplate="{TemplateBinding ContentTemplate}"
								ContentTransitions="{TemplateBinding ContentTransitions}"
								Foreground="{TemplateBinding Foreground}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
								IsTabStop="False" />

				<ItemsControl x:Name="PrimaryItemsControl"
							  HorizontalAlignment="Right"
							  MinHeight="{ThemeResource AppBarThemeCompactHeight}"
							  IsTabStop="False"
							  Grid.Column="2">
					<ItemsControl.ItemsPanel>
						<ItemsPanelTemplate>
							<StackPanel Orientation="Horizontal" />
						</ItemsPanelTemplate>
					</ItemsControl.ItemsPanel>
				</ItemsControl>
			</Grid>
		</Grid>
	</win:ControlTemplate>

	<win:Style x:Key="MaterialCommandBarStyle"
			   TargetType="CommandBar">
		<!-- Setting content to empty to avoid getting the datacontext -->
		<Setter Property="Content"
				Value="" />
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<TextBlock Text="{Binding}"
							   Style="{StaticResource Headline6}"
							   Foreground="{ThemeResource MaterialSurfaceBrush}"/>
				</DataTemplate>
			</Setter.Value>
		</Setter>

		<Setter Property="Height"
				Value="{StaticResource MaterialCommandBarHeight}" />

		<Setter Property="HorizontalAlignment"
				Value="Stretch" />
		<Setter Property="VerticalAlignment"
				Value="Top" />
		<Setter Property="HorizontalContentAlignment"
				Value="Left" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />

		<Setter Property="OverflowButtonVisibility"
				Value="Collapsed" />
		<Setter Property="IsDynamicOverflowEnabled"
				Value="False" />

		<Setter Property="Template"
				Value="{StaticResource XamlMaterialCommandBarTemplate}" />
	</win:Style>

	<Style x:Key="DefaultCommandBarStyle"
		   TargetType="CommandBar"
		   BasedOn="{StaticResource MaterialCommandBarStyle}">
		<Setter Property="toolkit:CommandBarExtensions.BackButtonForeground"
				Value="{StaticResource MaterialSurfaceBrush}" />
		<Setter Property="Background"
				Value="{ThemeResource MaterialOnBackgroundBrush}" />
		<Setter Property="Foreground"
				Value="{ThemeResource MaterialSurfaceBrush}" />
		<android:Setter Property="Height"
				Value="100" />
		<Setter Property="Padding"
				Value="{StaticResource StatusBarThickness}" />
	</Style>

	<Style x:Key="TransparentCommandBarStyle"
		   TargetType="CommandBar">
		<Setter Property="toolkit:CommandBarExtensions.BackButtonForeground"
				Value="{StaticResource MaterialSurfaceBrush}" />
		<Setter Property="Height"
				Value="56" />
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="Foreground"
				Value="{StaticResource MaterialSurfaceBrush}" />
	</Style>
	
	<!-- Default Style -->
	<Style TargetType="CommandBar"
		   BasedOn="{StaticResource DefaultCommandBarStyle}" />

</ResourceDictionary>
