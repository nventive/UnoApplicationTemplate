<UserControl x:Class="ApplicationTemplate.Views.Content.DiagnosticsOverlay"
			 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
			 xmlns:uc="using:Nventive.View.Converters"
			 xmlns:nve="using:Nventive.View.Extensions"
			 xmlns:diag="using:ApplicationTemplate.Views.Content.Diagnostics"
			 xmlns:xamarin="http://uno.ui/xamarin"
			 xmlns:not_ios="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			 mc:Ignorable="xamarin"
			 nve:BindableVisualState.VisualStateName="{Binding OverlayState}">

	<UserControl.Resources>
		<ResourceDictionary>

			<!-- Diagnostics Counter TextBlockStyle -->
			<Style x:Key="DiagnosticsCounterTextBlockStyle"
				   TargetType="TextBlock">
				<Setter Property="FontSize"
						Value="10" />
				<Setter Property="Foreground"
						Value="White" />
				<Setter Property="Margin"
						Value="0,1" />
				<Setter Property="TextAlignment"
						Value="Left" />
			</Style>

			<!-- Diagnostics Counter TextBlockStyle -->
			<Style x:Key="DiagnosticsCounterToolTipStyle"
				   TargetType="ToolTip">
				<Setter Property="Background"
						Value="#AA000000" />
				<Setter Property="Foreground"
						Value="WhiteSmoke" />
			</Style>

			<!-- Diagnostics Overlay ButtonStyle -->
			<Style x:Key="DiagnosticsOverlayButtonStyle"
				   TargetType="Button">

				<Setter Property="FontSize"
						Value="11" />
				<Setter Property="HorizontalAlignment"
						Value="Stretch" />
				<Setter Property="Foreground"
						Value="White" />
				<Setter Property="Background"
						Value="#AA000000" />
				<Setter Property="Padding"
						Value="4,4" />
				<Setter Property="MaxWidth"
						Value="200" />
				<Setter Property="MinWidth"
						Value="0" />
				<Setter Property="Margin"
						Value="0,1" />
				<Setter Property="BorderThickness"
						Value="0" />
				<Setter Property="MinHeight"
						Value="0" />

				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="Button">

							<Grid VerticalAlignment="{TemplateBinding VerticalAlignment}"
								  HorizontalAlignment="{TemplateBinding HorizontalAlignment}">

								<VisualStateManager.VisualStateGroups>
									<VisualStateGroup x:Name="CommonStates">
										<VisualState x:Name="Normal" />
										<VisualState x:Name="PointerOver" />
										<VisualState x:Name="Pressed">
											<Storyboard>
												<DoubleAnimation Duration="0:0:0.1"
																 To="0.8"
																 Storyboard.TargetName="BackgroundBorder"
																 Storyboard.TargetProperty="Opacity" />
											</Storyboard>
										</VisualState>
										<VisualState x:Name="Disabled" />
									</VisualStateGroup>
								</VisualStateManager.VisualStateGroups>

								<!-- Background Border -->
								<Border x:Name="BackgroundBorder"
										Background="{TemplateBinding Background}"
										BorderThickness="{TemplateBinding BorderThickness}"
										BorderBrush="{TemplateBinding BorderBrush}" />

								<!-- ContentPresenter -->
								<ContentPresenter x:Name="ContentPresenter"
												  Margin="{TemplateBinding Padding}"
												  Content="{TemplateBinding Content}"
												  ContentTemplate="{TemplateBinding ContentTemplate}"
												  AutomationProperties.AccessibilityView="Raw"
												  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
												  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="DiagnosticsTabListViewItemStyle"
				   TargetType="ListViewItem">

				<Setter Property="Background"
						Value="#BB000000" />
				<Setter Property="HorizontalContentAlignment"
						Value="Stretch" />
				<Setter Property="VerticalAlignment"
						Value="Top" />
				<Setter Property="VerticalContentAlignment"
						Value="Stretch" />
				<Setter Property="MinHeight"
						Value="0" />
				<Setter Property="MinWidth"
						Value="0" />
				<Setter Property="Padding"
						Value="4" />

				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="ListViewItem">

							<Grid x:Name="ContentBorder"
								  Background="{TemplateBinding Background}"
								  BorderBrush="{TemplateBinding BorderBrush}"
								  BorderThickness="{TemplateBinding BorderThickness}">

								<VisualStateManager.VisualStateGroups>
									<VisualStateGroup x:Name="CommonStates">
										<VisualState x:Name="Normal" />
										<VisualState x:Name="PointerOver" />
										<VisualState x:Name="Pressed" />
										<VisualState x:Name="Selected">
											<VisualState.Setters>
												<Setter Target="SelectionIndicator.Opacity"
														Value="1" />
											</VisualState.Setters>
										</VisualState>
										<VisualState x:Name="PointerOverSelected">
											<VisualState.Setters>
												<Setter Target="SelectionIndicator.Opacity"
														Value="1" />
											</VisualState.Setters>
										</VisualState>
										<VisualState x:Name="PressedSelected">
											<VisualState.Setters>
												<Setter Target="SelectionIndicator.Opacity"
														Value="1" />
											</VisualState.Setters>
										</VisualState>
									</VisualStateGroup>

									<VisualStateGroup x:Name="DisabledStates">
										<VisualState x:Name="Enabled" />
										<VisualState x:Name="Disabled" />
									</VisualStateGroup>

									<!-- For MultiSelectStates states, use the complete style in Uno.UI. See links on top of this file. -->
									<VisualStateGroup x:Name="MultiSelectStates" />

									<!-- For reordering states, use the complete style in Uno.UI. See links on top of this file.-->
									<VisualStateGroup x:Name="ReorderHintStates" />

									<!-- For drag states, use the complete style in Uno.UI. See links on top of this file. -->
									<VisualStateGroup x:Name="DragStates" />
								</VisualStateManager.VisualStateGroups>

								<Rectangle x:Name="SelectionIndicator"
										   IsHitTestVisible="False"
										   HorizontalAlignment="Stretch"
										   VerticalAlignment="Bottom"
										   Height="1"
										   Fill="White"
										   Opacity="0" />

								<!-- ContentPresenter -->
								<ContentPresenter x:Name="ContentPresenter"
												  Margin="{TemplateBinding Padding}"
												  Content="{TemplateBinding Content}"
												  ContentTransitions="{TemplateBinding ContentTransitions}"
												  ContentTemplate="{TemplateBinding ContentTemplate}"
												  xamarin:ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
												  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
												  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="DiagnosticsHorizontalListViewStyle"
				   TargetType="ListView"
				   BasedOn="{StaticResource DefaultListViewStyle}">

				<Setter Property="ItemsPanel">
					<Setter.Value>
						<ItemsPanelTemplate>
							<StackPanel Orientation="Horizontal" />
						</ItemsPanelTemplate>
					</Setter.Value>
				</Setter>

				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="ListView">
							<ScrollViewer x:Name="ScrollViewer"
										  xamarin:Style="{StaticResource ListViewBaseScrollViewerStyle}"
										  TabNavigation="{TemplateBinding TabNavigation}"
										  HorizontalScrollMode="Enabled"
										  HorizontalScrollBarVisibility="Hidden"
										  IsHorizontalScrollChainingEnabled="True"
										  IsHorizontalRailEnabled="True"
										  VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}"
										  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
										  IsVerticalScrollChainingEnabled="{TemplateBinding ScrollViewer.IsVerticalScrollChainingEnabled}"
										  IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}"
										  ZoomMode="{TemplateBinding ScrollViewer.ZoomMode}"
										  IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}"
										  BringIntoViewOnFocusChange="{TemplateBinding ScrollViewer.BringIntoViewOnFocusChange}"
										  AutomationProperties.AccessibilityView="Raw">

								<ItemsPresenter Header="{TemplateBinding Header}"
												HeaderTemplate="{TemplateBinding HeaderTemplate}"
												HeaderTransitions="{TemplateBinding HeaderTransitions}"
												Footer="{TemplateBinding Footer}"
												FooterTemplate="{TemplateBinding FooterTemplate}"
												FooterTransitions="{TemplateBinding FooterTransitions}"
												Padding="{TemplateBinding Padding}" />
							</ScrollViewer>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

		</ResourceDictionary>
	</UserControl.Resources>

	<Grid>
		<VisualStateManager.VisualStateGroups>
			<VisualStateGroup x:Name="ExpandStates">
				<VisualState x:Name="MinimizedRight" />
				<VisualState x:Name="MinimizedLeft">
					<VisualState.Setters>
						<Setter Target="RootGrid.CornerRadius"
								Value="0,8,8,0" />
						<Setter Target="RootGrid.HorizontalAlignment"
								Value="Left" />
					</VisualState.Setters>
				</VisualState>
				<VisualState x:Name="Expanded">
					<VisualState.Setters>
						<Setter Target="RootGrid.CornerRadius"
								Value="0" />
						<Setter Target="RootGrid.HorizontalAlignment"
								Value="Stretch" />
						<Setter Target="RootGrid.VerticalAlignment"
								Value="Stretch" />
						<Setter Target="ExpandedContainerGrid.Visibility"
								Value="Visible" />
						<Setter Target="ExpandButton.Content"
								Value="Minimize" />
					</VisualState.Setters>
				</VisualState>
			</VisualStateGroup>
		</VisualStateManager.VisualStateGroups>
		
		<Grid x:Name="RootGrid"
			  Background="#AA000000"
			  BorderThickness="1"
			  BorderBrush="#000000"
			  CornerRadius="8,0,0,8"
			  HorizontalAlignment="Right"
			  VerticalAlignment="Top"
			  Padding="0"
			  Margin="0,100,0,0">

			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition Height="Auto" />
				<RowDefinition Height="*" />
			</Grid.RowDefinitions>

			<StackPanel HorizontalAlignment="Right"
						Padding="4"
						xamarin:IsHitTestVisible="False">

				<!-- Active ViewModels -->
				<TextBlock Foreground="#4cbfe1"
						   Style="{StaticResource DiagnosticsCounterTextBlockStyle}">
					
					<!--Label & Value -->
					<Run Text="AVM:" />
					<Run Text="{Binding Counters.ActiveViewModels}" />

					<!-- Tool Tip -->
					<ToolTipService.ToolTip>
						<ToolTip Style="{StaticResource DiagnosticsCounterToolTipStyle}"
								 Content="Number of active viewmodels (Created - Disposed)" />
					</ToolTipService.ToolTip>
				</TextBlock>

				<!-- Uncollected ViewModels -->
				<TextBlock Foreground="#4cbfe1"
						   Style="{StaticResource DiagnosticsCounterTextBlockStyle}">
					
					<!--Label & Value -->
					<Run Text="UVM:" />
					<Run Text="{Binding Counters.UncollectedViewModels}" />
					
					<!-- Tool Tip -->
					<ToolTipService.ToolTip>
						<ToolTip Style="{StaticResource DiagnosticsCounterToolTipStyle}"
								 Content="Number of uncollected viewmodels (Disposed - Destroyed)" />
					</ToolTipService.ToolTip>
				</TextBlock>

				<!-- Active Properties -->
				<TextBlock Foreground="#4cbfe1"
						   Style="{StaticResource DiagnosticsCounterTextBlockStyle}">
					
					<!--Label & Value -->
					<Run Text="AP:" />
					<Run Text="{Binding Counters.ActiveProperties}" />
					
					<!-- Tool Tip -->
					<ToolTipService.ToolTip>
						<ToolTip Style="{StaticResource DiagnosticsCounterToolTipStyle}"
								 Content="Number of active properties (Created - Disposed)" />
					</ToolTipService.ToolTip>
				</TextBlock>

				<!-- Active Properties -->
				<TextBlock Foreground="#4cbfe1"
						   Style="{StaticResource DiagnosticsCounterTextBlockStyle}">
					
					<!--Label & Value -->
					<Run Text="UP:" />
					<Run Text="{Binding Counters.UncollectedProperties}" />
					
					<!-- Tool Tip -->
					<ToolTipService.ToolTip>
						<ToolTip Style="{StaticResource DiagnosticsCounterToolTipStyle}"
								 Content="Number of uncollected properties (Disposed - Destroyed)" />
					</ToolTipService.ToolTip>
				</TextBlock>

				<!-- Active Properties -->
				<TextBlock Foreground="#4cbfe1"
						   Style="{StaticResource DiagnosticsCounterTextBlockStyle}">
					
					<!--Label & Value -->
					<Run Text="AC:" />
					<Run Text="{Binding Counters.ActiveCommands}" />
					
					<!-- Tool Tip -->
					<ToolTipService.ToolTip>
						<ToolTip Style="{StaticResource DiagnosticsCounterToolTipStyle}"
								 Content="Number of active commands (Created - Disposed)" />
					</ToolTipService.ToolTip>
				</TextBlock>

				<!-- Uncollected Commands -->
				<TextBlock Foreground="#4cbfe1"
						   Style="{StaticResource DiagnosticsCounterTextBlockStyle}">
					
					<!--Label & Value -->
					<Run Text="UC:" />
					<Run Text="{Binding Counters.UncollectedCommands}" />
					
					<!-- Tool Tip -->
					<ToolTipService.ToolTip>
						<ToolTip Style="{StaticResource DiagnosticsCounterToolTipStyle}"
								 Content="Number of uncollected commands (Disposed - Destroyed)" />
					</ToolTipService.ToolTip>
				</TextBlock>

				<!-- Private Memory Size -->
				<!-- Not available on iOS for now. -->
				<!-- See https://github.com/dotnet/runtime/issues/86251 for more details. -->
				<not_ios:TextBlock Grid.Row="1"
								   Foreground="LightBlue"
								   Style="{StaticResource DiagnosticsCounterTextBlockStyle}"
								   TextAlignment="Right">

					<!-- Label & Value -->
					<Run Text="{Binding PrivateMemorySize}" />

					<!-- Tool Tip -->
					<ToolTipService.ToolTip>
						<ToolTip Style="{StaticResource DiagnosticsCounterToolTipStyle}"
								 Content="Amount of private memory allocated for the application." />
					</ToolTipService.ToolTip>
				</not_ios:TextBlock>

				<!-- Managed Memory Size -->
				<TextBlock Grid.Row="1"
						   Foreground="CornflowerBlue"
						   Style="{StaticResource DiagnosticsCounterTextBlockStyle}"
						   TextAlignment="Right">

					<!-- Label & Value -->
					<Run Text="{Binding ManagedMemorySize}" />

					<!-- Tool Tip -->
					<ToolTipService.ToolTip>
						<ToolTip Style="{StaticResource DiagnosticsCounterToolTipStyle}"
								 Content="Amount of managed memory allocated for the application." />
					</ToolTipService.ToolTip>
				</TextBlock>
			</StackPanel>

			<!-- Diagnostics expanded content -->
			<Grid x:Name="ExpandedContainerGrid"
				  Visibility="Collapsed"
				  Grid.Row="0"
				  Grid.RowSpan="3"
				  Padding="0,0,50,0">
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition Height="*" />
				</Grid.RowDefinitions>

				<!-- Tab bar -->
				<ListView Style="{StaticResource DiagnosticsHorizontalListViewStyle}"
						  ItemsSource="{Binding Tabs}"
						  ItemContainerStyle="{StaticResource DiagnosticsTabListViewItemStyle}"
						  SelectionMode="Single"
						  SelectedIndex="{Binding ActiveTabIndex, Mode=TwoWay}">
					<ListView.ItemTemplate>
						<DataTemplate>
							<StackPanel>
								<TextBlock Text="{Binding Title}"
										   Foreground="White"
										   FontSize="12" />
							</StackPanel>
						</DataTemplate>
					</ListView.ItemTemplate>
				</ListView>

				<!-- Active diagnostics tab. (This includes things like the HttpDebuggerView.) -->
				<diag:DiagnosticsTabPresenter ViewModel="{Binding ActiveTabViewModel}"
											  Grid.Row="1"
											  Margin="2,2,2,0" />
			</Grid>

			<StackPanel HorizontalAlignment="Right"
						Grid.Row="2">

				<!-- Collect Memory Button -->
				<Button Content="Collect"
						Command="{Binding CollectMemory}"
						Style="{StaticResource DiagnosticsOverlayButtonStyle}" />

				<!-- Theme Button -->
				<Button Content="Theme"
						Click="OnThemeButtonClicked"
						Style="{StaticResource DiagnosticsOverlayButtonStyle}" />

				<!-- More Button -->
				<Button x:Name="ExpandButton"
						Content="Expand"
						Command="{Binding ToggleMore}"
						Style="{StaticResource DiagnosticsOverlayButtonStyle}" />

				<!-- Move Button -->
				<Button Content="Move"
						Command="{Binding ToggleSide}"
						Style="{StaticResource DiagnosticsOverlayButtonStyle}" />

				<!-- Close Button -->
				<Button Content="X"
						Command="{Binding CloseDiagnostic}"
						Style="{StaticResource DiagnosticsOverlayButtonStyle}" />
			</StackPanel>
		</Grid>
	</Grid>
</UserControl>
