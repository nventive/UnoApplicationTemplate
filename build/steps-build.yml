parameters:
- name: androidKeyStoreFile
  type: string
  default: ''
- name: iosCertificateFile
  type: string
  default: ''
- name: iosCertificatePassword
  type: string
  default: ''
- name: iosProvisioningProfileFile
  type: string
  default: ''

steps:
- task: UseDotNet@2
  displayName: 'Install .Net Core runtime 2.1.x'
  inputs:
    version: 2.1.x
    packageType: 'runtime'
    installationPath: '$(Agent.ToolsDirectory)/dotnet'

- task: gitversion/setup@0
  inputs:
    versionSpec: '5.0.0'
  displayName: 'Install GitVersion'

- task: gitversion/execute@0
  inputs:
    useConfigFile: true
    configFilePath: 'gitversion.yml'
  displayName: 'Calculate version'

- task: MSBuild@1
  displayName: 'Restore solution packages'
  inputs:
    solution: $(Build.SourcesDirectory)/src/$(SolutionFileName)
    msbuildLocationMethod: version
    msbuildVersion: latest
    msbuildArchitecture: x86
    msbuildArguments: >
      /t:restore
    configuration: $(ApplicationConfiguration)
    platform: $(ApplicationPlatform)
    clean: false
    maximumCpuCount: true
    restoreNugetPackages: false
    logProjectEvents: false
    createLogFile: false

- task: DownloadSecureFile@1
  name: keyStore
  displayName: "Download keystore from secure files"
  condition: and(succeeded(), not(eq('${{ parameters.androidKeyStoreFile }}', ''))) # Don't run this task when the parameter is empty
  inputs:
    secureFile: ${{ parameters.androidKeyStoreFile }}

- task: InstallAppleCertificate@2
  displayName: 'Install Apple certificate ${{ parameters.iosCertificateFile }}'
  condition: and(succeeded(), not(eq('${{ parameters.iosCertificateFile }}', '')))
  inputs:
    certSecureFile: ${{ parameters.iosCertificateFile}}
    certPwd: ${{ parameters.iosCertificatePassword}}

- task: InstallAppleProvisioningProfile@1
  displayName: 'Install Apple provisioning profile ${{ parameters.iosProvisioningProfileFile }}'
  name: provisioningProfile
  condition: and(succeeded(), not(eq('${{ parameters.iosProvisioningProfileFile }}', '')))
  inputs:
    provProfileSecureFile: ${{ parameters.iosProvisioningProfileFile }}

- task: MSBuild@1
  displayName: 'Build solution in $(ApplicationConfiguration) | $(ApplicationPlatform)'
  inputs:
    solution: $(Build.SourcesDirectory)/src/$(SolutionFileName)
    msbuildLocationMethod: version
    msbuildVersion: latest
    msbuildArchitecture: x86
    msbuildArguments: >
      /p:PackageVersion=$(SemVer)
      /p:ApplicationEnvironment=$(ApplicationEnvironment)
      /p:ApplicationVersion=$(MajorMinorPatch)
      /p:AndroidSigningKeyStore=$(keyStore.secureFilePath)
      /p:AndroidSigningStorePass=$(AndroidSigningStorePass)
      /p:AndroidSigningKeyPass=$(AndroidSigningKeyPass)
      /p:AndroidSigningKeyAlias=$(AndroidSigningKeyAlias)
      /p:AndroidKeyStore=true
      /p:CodesignProvision=$(provisioningProfile.provisioningProfileUuid)
      /p:ApplicationIdentifier=$(ApplicationIdentifier)
    configuration: $(ApplicationConfiguration)
    platform: $(ApplicationPlatform)
    clean: false
    maximumCpuCount: true
    restoreNugetPackages: false
    logProjectEvents: false
    createLogFile: false

- script: dotnet test $(Build.SourcesDirectory)/src/$(SolutionFileName) /p:Configuration=$(ApplicationConfiguration) /p:CollectCoverage=true /p:IncludeTestAssembly=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/src/coverage /p:ExcludeByFile="**/*.g.cs" /p:Exclude="[*]*.Tests.*" --logger trx --no-build
  displayName: 'Run tests'
  condition: and(succeeded(), eq(variables['ApplicationConfiguration'], 'Release_Tests'))

- task: PublishTestResults@2
  displayName: Publish test results
  condition: and(succeeded(), eq(variables['ApplicationConfiguration'], 'Release_Tests'))
  inputs:
    testRunner: VSTest
    testResultsFiles: "**/*.trx"

- task: PublishCodeCoverageResults@1
  displayName: Publish code coverage report
  condition: and(succeeded(), eq(variables['ApplicationConfiguration'], 'Release_Tests'))
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: "$(Build.SourcesDirectory)/src/coverage.cobertura.xml"
  
  # Generates basic release notes for App Center including: branch, commit id, url to the pipeline run, the environment name for the app
- task: nventiveReleaseNotesCompiler@5
  displayName: 'Generate release notes file'
  inputs:
    EnvironmentName: $(ApplicationEnvironment)
    AdditionalReleaseNotesFile: Canary.md
    OutputFilePath: $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
    CreateTruncatedVersion: true
    CharacterLimit: 5000
    TruncatedOutputFilePath: '$(Build.ArtifactStagingDirectory)/ReleaseNotes-Truncated.md'

- publish: $(Build.ArtifactStagingDirectory)
  displayName: 'Publish artifact $(ApplicationConfiguration) | $(ApplicationPlatform)'
  artifact: $(ArtifactName)

- task: PostBuildCleanup@3
  displayName: 'Post-Build cleanup :  Cleanup files to keep build server clean!'
  condition: always()
